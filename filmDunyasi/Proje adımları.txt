3 katmanlı proje oluşturulacak. Bu sebepten Blank Solution oluşturulacak.
Bu projede Code First yaklaşımı kullanılacak. Database First yaklaşımında ilk olarak tablolar databasede oluşturulur.
Code First'te ise tablolar kodda oluşturulur. Bİr tabloda değişiklik olunca Code First yaklaşımda migration ile  veri tabanına
değişikliklee yansıtılıyor. Code First yaklaşımın avantajı veri tabanı değişince yeniden tabloları oluşturmak gerekiyor ama codeFirst
te ise böyle bir sıkıntı olmaz. Kod değişmez. ASP.NET Core'da ise Code First yaklaşımı kullanılıyor. Ayrıca database türüde değişse
mesela PostgreSQL'den MSSQL veya ORACLE'a geçiş yapmak istersekte Code First bize kolaylık sağlıyor.

Ayrıca ASP.NET Core Linux,Windows vs. bütün işletim sistemlerinde çalışır.(Sunucularda çalışır.)
-- HAFTA 4 --
1. Blank Solution oluşturulur. Create New Project -> Blank Solution -> Proje Adı : filmDunyasi -> Create
2.Boş projenin içine 3 tane proje oluşturacağız. ( 1. proje arayüz projesi ASP.NET MVC)
3. Solution Explorer içinde Blank Solution'a sağ tık -> Add -> New Project -> ASP.NET Core Web Applicaton C# ->
Project Name : filmDunyasi.Web -> Create 
4..NET Core -> ASP.NET Core 3.1 -> Web Application ( Model-View-Controller) tıklayıp -> 
Authentication Change (Microsoft'un yetkilendirme için kullanıma sunduğu bir özellik) -> İndividual User Accounts -> OK -> Create
Projemizin sayfalarını oluşturuken Admin, Müşteri rolü vs. gibi roller eklenecek. Bunun için AuthenticationChange gerekiyor.
Şuan Frontend için oluşturduğumuz projedir. 
5.Veri tabanını ve veri tabanının ekleneceği proje oluşturucağız. Data projemiz olacak bu.
Solution sağ tık -> Add New Projet -> Class Library .Net C# -> Project Name : filmDunyasi.Data -> Create
6. 3. projeyi oluşturucağız.  Model projesidir. 
Solution sağ tık -> Add New Projet -> Class Library .Net C# -> Project Name : filmDunyasi.Models -> Create(Models'te database'e kayır edeceğimiz tabloları tanıtıyoruz.)
7. filmDunyasi.Models sağtık -> Add -> Class -> Name : Kategori -> sınıfı public yap.
Bunun Primary Key vs. tanımlamalamarını yap. 
-[Key] annotation'ı varsa bu bir primaryKey'dir.
-ID'yi int yerine Guid yapabiliriz.  Guid 16 byte'lık yer ayıran ve otomatik olarak oluşturulan primaryKey'dir.
-eğer değişkeni int ID olarak tanımlarsak veya KategoriID yaparsakta [Key] annotation'ı kullanmamıza gerek kalmıyor.
string Tur ve int Sira değişkenlerini ekle.
8. Model'e sağ tık ve Dil adında bir class ekle.
9.Model'e sağ tık ve Filmadında bir class ekle.
Film class'ı içinde KategoriID olarak tanımladığımız property , Kategori tablosundan gelen bir Foreign Key olduğunu
söylememiz gerekiyor. Bunu ise aşağıdaki gibi tanımlarız:
       
	public int KategoriID { get; set; }
        [ForeignKey("KategoriID")]
        public virtual Kategori Kategori { get; set; }

KategoriID, Kategori tablosunun yabanci anahtarıdır demektir.
Aynı şekilde Dil içinde:

 	public int DilID { get; set; }
        [ForeignKey("DilID")]
        public virtual Dil Dil { get; set; }
şeklinde foreignKey oluşturulur.

  	[DataType(DataType.Date)]
        public DateTime VizyonTarihi { get; set; }
[DataType(DataType.Date)] -> Attribute'si ise DateTime ifadesinin sadece Date kısmını al demektir. Yoksa tarih ve saat bilgisi olur. Saat gereksiz.

 	[Required]
        public string FilmAdi { get; set; }
[Required] -> bu alanın boş olmaması gerektiği durumda bu attribute eklenir.
10.Model'e sağ tık ve Ulke adında bir class ekle.
11.Model'e sağ tık ve Yonetmen adında bir class ekle. 
-- HAFTA 5--
12. Film tablosuna Yönetmen için bir Foreign key oluşturuldu.
13.Yönetmen tablosuna ise 1 yönetmenin çok filmi olabilir. Bu sebepten Yönetmen modeline ICollection<Film> Film şeklinde 1 e çok bağlnatı sağlanır.
ICollection kullanırak navigation property'si koyulur.
14. Bu durum aslında kategori içinde geçerlidir ama database optimizasyonu açısından Kategoriye eklemiyoruz. Çünkü her yeni filmi Kategori içine 
ekliyor ve veritabanı index yapısı karmaşıklaşır, geç çalışır. Bu sebepten eklemiyoruz. başka türlü elde ededeceğiz. Bunu eklersek
bu durum lazy loading oluyor. Yani kategorideki filmlere erişmek kolay ama database optimizasyonu sıkıntılı olur.
<<<<Bir tarafta Forign varsa diğer tarafta ICollection olacak diye birşey yok.>>>
1 e çokta çok  illaki Icollection koyulacak diye bişey yok.
15. Oyuncu tablosu oluşturulur.
16. Oyuncu ile Film arasında çok a çok ilişki vardır. Çok a çok ta Foreign Key veya Icollection yapamayız
ara bir tablo yapılır. Bu tablo ile çoka çok ilişki sağlanır.
17.FilmOyuncu adında ara bir tablo yapılır.
Bu tabloya OyuncuID ve FilmID adında iki tablonunda Primary Key'i Foreign Key olarak koyulur.
18.  İl tablosu için class oluşturulur.
19. İlçe tablosu için class oluşturulur. İl ilçe arasında 1 e çok bağlantı kurulur.
20. Sinema classı oluşturulur. İlçe ile 1 e çok bağlantı oluşturulur.
21. Salon class'ı oluşturulur.
22. Gosterim class ı oluşturulur. Gösterim class'ında hangi filmin hangi salonda ve saatleri verilir.
-- HAFTA 6 --
23.  ASP.NET MVC WEB projesi oluşturulurken Microsoft Identy seçilmişti. Migrations klasörü altında migration işlemleri
Microsft tarafından bize hazır sunuluyor. Bu tablolar direk veri tabanında otomatik olarak oluşturulacak.
ASP.NET MVC WEB projesi altında  Data -> Migrations altında Data migrationları,  Models klasörü altında Modelleri tanımayabilirdik.
Ama biz 3 katmanlı yapı kullandık bu sebepten Models,Data ve Web projelerini ayrı ayrı oluşturduk. Katmanlı mimarinin avantajı Core MVC Web katmanını silip 
Angular, Vue gibi frontend teknolojilerini ekleyebiliriz. Diğer kısımlar sabirt kalır ve yeniden kullanılabilir durumda olur.
Peki ayrı katman yapınca nasıl migration işlemleri olacak.
Şu şekilde oluyor. MVC Web  rpojesi altınd Data-> klasörü içindeki Migrations ve ApplicationDbContext klasörü cut yapılır.
Ardından filmDunyası.Data projesi içine paste yapılır. namespaces'ler güncellenir. (filmDunyasi.Data olarak.)
filmDunyası.MVC Web içerisindeki Data klasörü silinebilir.
24.filmDunyası.MVC Web projesi içindeki dependencyler cut/paste yapılan migrationslar için gerekiyor. Peki bunların Data projesine nasıl taşıyacağız?
Microsoft Core modüler bir yapıdır. Bu sebepten direk taşıyamayız. Her modül kendi içinde dependencyleri tutar. Bu sebepten MVC Web projesi -> Dependencies-> Packages->
içindeki EntityFrameWorkCore ile ilgili paketlerin aynısını filmDunyası.Data projesinin dependencieslerine eklememiz gerkiyor.
filmDunyasi.Data sağ tık -> Manage NuGet packages ->  buradan WEB içindeki packages'lar Data'yada eklenir. packages eklenir.
Migration class'ları Visual Studio tarafından veri tabanına gönderilmesi için otomatik oluşturuyor.
Projeye sağ tıklayıp -> Edit project File yapılarak dependenciesler gözüküyor.
25. Visual Studio içinde otomatik olarak gelen Light MSSQL Server içinde local bir database olarak gelir. Burada (localdb'de)işlerimizi hallettikten sonra buradan PostGre SQL'e taşıyacağız.
Herhangi bir MSSQL, Oracle, PostgerSQL kurmaya gerek kalmadan çalışmamızı yapabiliyoruz.
26. Bütün ayarlar Web projesi içindeki filmDunyasi.Web -> apppsettings.json içinde. "DefaultConnection": içinde ise Database ismini filmDunyasi2020 olarak değiştirdik.
(Server=(localdb)\\mssqllocaldb;Database=filmDunyasi2020;)
27. Migration işleminin yapılabilesi için 
Tools -> Nuget Package Manager  -> Package Manager Console -> açılır.  Default Project : filmDunyasi.Data seçilir.
terminal ekranına update-database yazılır.(Default project filmDunyasi.Data seçili olmalıdır.) Terminal ekranında görülen error'lar giderilir. (Paket ekleme projeye sağ tık -> Manage Nuget Packages... ile  eksik paketler projeye eklenir.)
localdb olarak oluşturduğu database ->
C:\Users\Serdar\filmDunyasi2020.mdf 
C:\Users\Serdar\filmDunyasi2020_log.ldf 
şeklinde oluşur.
-- HAFTA 7 --
28. filmDunyası.Web içindeki appsettings.json
    "DefaultConnection": "Server=(localdb)\\mssqllocaldb;Database=filmDunyasi2020;Trusted_Connection=True;MultipleActiveResultSets=true"
ifadesindeki connection ı değiştirerek farklı databaselere projemizi uyumlandırabiliyoruz. Ama MS Visual Studio tarafından 
local olarak kurulan veritabanı üzerinden şuanlık işlemlerimizi yapacağız. 
29. filmDunyasi.Data projesinde  Migrations içindeki Schema içinde proje oluşturulurken Microsoft Identity Auutorization and Authentiation
seçtiğimizden bu şema oluşturulup roller Visual Studio tarafından otomatik olarak oluşturuluyor. 
Migration modelden veri tabanına göçü sağlayan dosyadır. PAckage Manager Console'dan update-database yazınca (Default project  filmDunyasi.Data seçili olmalı.)
database migration işlemleri geçekleşir ve 
.mdf ve _log.mdf dosyaları oluşur. 
Oluşturulan database'i görüntülemek için View-> SQL Server Object Explorer'a tıklanır ve açılır.
29. localdb -> Databases içine gidince databaseler gözüküyor. Table'ları açabiliriz. 
filmDunyasi2020 -> Tables ->  tablosuna bakıldığından Microsoft Identity tarafından oluşturulan tabloları görüyoruz. 
(filmDunyasi.Data -> Migrations-> CreateIdentitySchema.cs içinde migrationBuilder.CreateTable ile üretilen tablolar 
burada oluşturulmuş olduğunu görüyoruz. Örneğin AspNetUsers tablosu.)
AspNetUsers Tablosunun üzerinde sağ tık -> View Data yaparsak içinin boş olduğunu görürüz. Bunu daha sonra doldurcağız
30.Örnek olarak bizim Model projemizde oluşturduğumuz Kategori tablosunu aktaracağız(migrations) ve databasede tablolarda gözükecek.
filmDunyasi.Model projesi içinde -> ApplicationDbContext.cs dosyasını aç. Bu class IdentityDbContext'i kalıtım olarak almış.
yani Identity'in bütün tablolarını içinde almış.
 --- ApplicationDbContext classı içinde  public DbSet<Kategori> Kategoris { get; set; } şeklinde eklenir.
	  DbSet veri tabanındaki tabloyu ifade eder.
Ekledikten sonra Migration işlemine Kategori tablosunu tabi tutmak gerekiyor ve database göç etsin.
Solution sağ tık-> Rebuild Solution yapılır.
Package Manager Console'a --> add-migration EkleKategori yazılır ve Default project filmDunyasi.Data seçilir.
filmDunyasi.Data içinde Migrations-> kısmına EkleKategori şeklinde yeni dosyamız  gelir.
Yeni oluşan EkleKategori dosyasına bakacak olursak oluşacak tablo hakkında bilgileri görebilir.
31. Oluşturulan migration dosyasından sonra databasede Kategori tablosu oluşturması için 
PAckage Manager Console'-> update-database yazılır ve Default Project olarak filmDunyasi.Data seçilir.
SQL Server Object Explorer Tables sağ tık Reflesh yapılınca Kategori tablosunun database'e eklendiğini görürüz.
Kategori tablosuna elle 2 kayıt ekledik. Deneme amaçlı normalde izin verilmemli ve yapılmamalıdır.
32.ISS Express'e tıkladığımızda Web projei çalışır ve Default bir ekran gelir. Ekranda Privacy alanını  değiştireceğiz.
Biz MVC kullanıyoruz. Yani Model View Controller. 
Tek proje yapsaydık Biz filmDunyasi.Web projesinde Models kısmında Modelleri tanıttılacaktır ama biz katmanlı mimari kullanıyoruz.
Web görünümde üstteki kısma LAyout diyoruz.
View->Home klasörü altındaki index.cshtml olan kısım Home sayfasında açılan ekrandır. 
index.cshtml açlınca 
@{
    ViewData["Title"] = "Home Page";
}

kısım Razor ifadesidir. Yan, C# yazılıyor. Yani bizde bu şekilde  c# kodu yazabiliriz.

@{
    for (int i = 1; i < 11; i++)
    {  <p>@i</p>}
}
ISSEXpress ile çalıştırısak Home sayfasında bunun yazıldığını görürüz.

HomeController.cs altında
        public IActionResult Index()
        {
            return View();
        }

        public IActionResult Privacy()
        {
            return View();
        }
		
kısımları sayfaları gösterir. Biz Privacy'i kullanmayacağız.
33. Shared klasörü altındaki _Layout.cshtml olan dosya bizim layoutumuzdur. sayfa düzenimizdir.
içinde Home adındaki sayfayı Anasayfa yapılır ve Privacy sayfası kaldırılır.

                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Ana Sayfa</a>
                        </li>
Bu kısma  Dropdown menu eklenecek. Bunun için Bootsrap kullanılacak.

                        <li class="nav-item dropdown">
                            <a class="nav-link text-white dropdown-toggle" href="#" id="navbarDropDown" data-toggle="dropdown">
                                Yönetim
                            </a>

                            <div class="dropdown-menu">
                                <a class="nav-link text-dark" asp-area="" asp-controller="Kategori" asp-action="Index">Kategoriler</a>
                            </div>
                        </li>
eklnir
Text kısmını white yapıldı. Footer kısmında da bg-primary css class ı eklenir.
34.Controller -> sağtık -> Add Controller -> MV Controller witeh vievs, using Entity Framework seçilir. 
Model Class Kategori (filmDunyasi.Models) seçilir. 
Data Context ApplicationDbContext (filmDunyasi.Data) kısmı seçilir. Buna Scaoffolding yöntemi denir. 
Use A loayout page kısmında ... seçilirse farklı bir layout varsa seçilebilir. Şuanlık bizim tek layoutumuz var.
O sebepten seçilmesine gerek yok.
Controller name KategoriController yazılır. Add yapılır. 
Controller altında KategoriController.cs ve Views->Kategori->klasörü altında dosyalar oluşturuldu.
KategoriController ->  
- Controller kodlarının olduğu kısımdır. 
- Controller kısmından kalıtım alır.
- ApplicationDbContext nesnesi bizim databasemizi gösterir.
-           public async Task<IActionResult> Index()
        {
            return View(await _context.Kategoris.ToListAsync());
        }
methodu async olarak belirtilmiştir. İşlemler asenkron (paralel) devam eder. 
Async kullanıldığında ise Task<> kullanılır ve method içinde  View ( await ..) kullanılmalıdır.
-- HAFTA 8 --
35. filmDunyasi.Web projesi içindeki wwwroot klasörü içinde js, css, gibi statik kaynakları
buraya koyuyoruz. Hazır lib-> bootstrap klasörü içinde bootstrapt cssi js si mevcut. Bir tema satın alıp
işlem yapmak istiyorsak bu kalsörleri güncellemek gerekiyor. 
css->site.css içinde kendi css'lerimizi ekleyebilriiz.
js->site.js kısmına ise kendi js. kodlarımızı yazabiliyoruz.
36.filmDunyasi.Web projesinde Controller ve View klasörlerini kullanacağız. Models kısmı ayrı bir klasörde.
37. tarayıcıdan girilen www.cartcurt.com adresi MV mantığında -> Controller'a gelir.
Controller  kendinde default olarak hangi sayfa tanımlandıysa ( genel olarak HOme index.html) onu gösterir.
Ama bir veri gerekiyorsa mesela Databaseden veriyi alır.
Controller Databaseden veriyi aldıktan sonra View'a gider.
Controller veriyi View'a gönderilir. Ardından View istek yapan kullanıcıya döner.
38.KategoriController.cs kolarını inceleyeceğiz.

private readonly ApplicationDbContext _context; satırı DB'yi gösterir.
filmDunyasi.Model'deki Kategori class'ı veri tabanındaki tabloyu ifade eder. Bunu yapabilmek için
filmDunyasi.Data projesi içindeki ApplicationDbContext  classı içinde 
public DbSet<Kategori> Kategori { get; set; } şeklinde ekleyerek ApplicationDbContext  sınıfının içine
kategori tablosunu dahil etmiş olduk. Daha sonra migration işlemi ile Kategori tablosu için scriptler
oluşturuldu.Ardından tabloyu fiziksel olarak oluşturmak için update-database demiştik.

Controller içlerinde CRUD işlemlerini yapabileceğimiz kodları yazacağız. Bu sebepten 
private readonly ApplicationDbContext _context; veritabanı nesnesini oluşturuyoruz.

ilk olarak genel olarak bir controllerın içindeki bir action'ı çağırmak için
controller/action şeklinde olur ama default olarak controllerın actionı yazılmasa bile
bunun default'u Index() action'ı gelir.
Bunu tabikide startup.cs'dosyası içinden değiştirebiliriz. Bu dosya içinde 
default olarak çağrılacak Controller ( Home) ve bunun default action'ı gösterilir.
Yani www.cartcurt.com girildiğinde kullanıcıya response olarak Home controller'ın Index Action'ı
döndürülür. Home yerine Kategori yazarsak default sayfamız Kategori olur Onunda default Index'i 
sayfa açılınca çalışırdı.

KategoriController'ına gelince default Index() içindeki
return View(await _context.Kategori.ToListAsync()); ile context database'den Kategori tablosunu listeleyen View dönecek.
Peki hangi View dönecek? Views klasörü içindeki Kategori klasörü altındaki ekranlardır. Peki hangi ekran dönecek?
Katergori Controller'ının default action'ını olan Index() actiondan bu View return edildiğinden
View klasorü -> Kategori -> Index.cshtml View'ı kullanıcıya dönecektir.
Index.cshtml içinde 	
@model filmDunyasi.Models.Kategori
ile model içindeki veriler alınır ve tablo kullanılarak içindeki veriler ekrana yazdırılır.
İncelemeye devam edersek;

 <a asp-action="Edit" asp-route-id="@item.ID">Edit</a> 
  <a asp-action="Delete" asp-route-id="@item.ID">Delete</a>
linklerini görüyoruz. Burada meslesa Edit linki'ne tıkladı. Linke tıklanınca Edit action'ına
gidileceği yazıyor ve giderkende @Item.ID ile kayıtın ID'sini götürüyor. Tıklandığında

KategoriController.cs'ın
 public async Task<IActionResult> Edit(int? id) actionına gider.(ID ile birlikte.)
 var kategori = await _context.Kategori.FindAsync(id); ile database'den id si ile kayıdı
alır ve kategori değişkenine aktarır. Gelen cevabı
return View(kategori); ile view'a gönderir. Peki bu View hangi view olacak?
Kategori Controller'ından gönderdiğimiz için bi kere View -> Kategori klasörü altına gidiyoruz.
Edit actionın'dan gönderildiği için de Edit.cshtml'e gidecektir. 
Edit.cshtm içinde
<div class="col-md-4"> css'i incelendiğinde 
bootsrapt'a bir row  12 kolon olarak ifade edilir. Burada bu div içine ne yazılırsa
tablo,form vs. sayfada 4 kolonluk yer kaplayacak anlamındandır yani ekranın 3'te 1'i. İncelemeye devam edelim;

<form asp-action="Edit">
.
.
.
  <input type="submit" value="Save" class="btn btn-primary" />
</form>

Bu kısımda Save butonuna basılınca formun gideceği (submit) yer Edit action'ı olarak belirlenmiştir.
Edit action'a gidecek. Peki daha önce Edit'e giderken bir ID ile birlikte gidilmişti ama şuan 
herhangi bir ID yok. Arasındak fark nedir dersek;

ID ile gidilen Edit action'ı GET işlemi yapıyor. 
Şimdi gidilecek olan Edit action'u ise POST işlemi yapıyor yani POST işlemi ile database'e veri
yazılacak. Save butonuna basıldı ve Edit actiona'ına gitmek istenildi.
KategoriController.cs içinde POST olan Edit actiona gidildi.
 [HttpPost]
 [ValidateAntiForgeryToken]
 public async Task<IActionResult> Edit(int id, [Bind("ID,Tur,Sira")] Kategori kategori) action'a gidildi.

HTTP GET işlemi için olan Edit action'ının başında [HttpGet] yazmaz yani yazılmasına gerek yoktur ama
HTTP POST işlemi için olan Edit action'ının başında [HttpPost] yazar. 
POST işlemini silme/ekleme/güncelleme için kullanıyoruz.
Ayrıca [ValidateAntiForgeryToken] ise Microsoft tarafından sunulmuş güzel bir çözümdür.
[ValidateAntiForgeryToken] çözümü dışarıdan direk post ile URL üzerinden bu action'a erişilemesin diye
konulmuş bir korumadır. Güvenlik problemini çözer. 
 _context.Update(kategori); --> veri tabanını update eder.
 await _context.SaveChangesAsync(); --> veri tabanına yapılan güncellemeyi kaydeder.


Edit.cshtml içinde Save yerine
 <a asp-action="Index">Back to List</a>
butonuna basılırsa Kategori-> Index() action'ı çalışır. Bu action'da daha önce belirttiğimiz gibi
tablo içindeki kayıtları listeleyen sayfayı döner.
39. KategoriController ve View'ları içindeki detail ile ilgili action vs html kodları kaldırıldı. Kullanılmayacak çünkü.
-- HAFTA 9 --
40.




